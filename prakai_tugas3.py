# -*- coding: utf-8 -*-
"""PrakAI_Tugas3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jNtswlKp-uvLwDEwV-4F5hUE1Hz3ncsG
"""

from queue import PriorityQueue

# Fungsi untuk merekonstruksi jalur
def reconstruct_path(came_from, start, goal):
    current = goal
    path = []

    while current != start:
        path.append(current)
        current = came_from[current]

    path.append(start)
    path.reverse()
    return path

# Fungsi algoritma Greedy Best-First Search
def greedy_search(graph, heuristic, start, goal):
    frontier = PriorityQueue()
    frontier.put((heuristic.get(start, float('inf')), start))
    came_from = {}
    explored = set()

    while not frontier.empty():
        _, current_node = frontier.get()

        if current_node == goal:
            print("Simpul Tujuan Ditemukan!")
            path = reconstruct_path(came_from, start, goal)
            print("Jalur terpendek:", path)
            return path

        explored.add(current_node)

        for neighbor in graph.get(current_node, []):
            if neighbor not in explored:
                frontier.put((heuristic.get(neighbor, float('inf')), neighbor))
                came_from[neighbor] = current_node

    print("Simpul tujuan tidak ditemukan!")
    return None

# Daftar Heuristik
heuristic = {
    'A': 4,
    'B': 3,
    'C': 3,
    'D': 1,
    'S': 6,
    'G': 0
}

# Graf menggunakan dictionary
graph = {
    'S': ['A', 'B'],
    'A': ['B', 'D'],
    'B': ['D', 'C'],
    'C': ['G', 'D'],
    'D': ['G']
}

# Titik awal dan tujuan
start_node = 'S'
goal_node = 'G'

# Panggil fungsi Greedy Search
greedy_search(graph, heuristic, start_node, goal_node)

from queue import PriorityQueue

# Fungsi rekonstruksi jalur dari goal ke start
def reconstruct_path(path, start, goal):
    current = goal
    route = [current]
    while current != start:
        current = path[current]
        route.append(current)
    route.reverse()
    return route

# Algoritma A* Tree Search
def a_star_tree_search(graph, start, goal, heuristic):
    frontier = PriorityQueue()
    frontier.put((0, start))  # (Priority, Node)
    path = {}

    while not frontier.empty():
        cost, current_node = frontier.get()

        if current_node == goal:
            print("Goal node found!")
            route = reconstruct_path(path, start, goal)
            print("Route optimal:", route)
            return True

        for neighbor, step_cost in graph[current_node].items():
            total_cost = cost + step_cost + heuristic[neighbor]
            frontier.put((total_cost, neighbor))
            path[neighbor] = current_node

    print("Goal node not found!")
    return False

# Algoritma A* Graph Search
def a_star_graph_search(graph, start, goal, heuristic):
    frontier = PriorityQueue()
    frontier.put((0, start))  # (Priority, Node)
    explored = set()
    path = {}

    while not frontier.empty():
        cost, current_node = frontier.get()

        if current_node == goal:
            print("Goal node found!")
            route = reconstruct_path(path, start, goal)
            print("Route optimal:", route)
            return True

        explored.add(current_node)

        for neighbor, step_cost in graph[current_node].items():
            if neighbor not in explored:
                total_cost = cost + step_cost + heuristic[neighbor]
                frontier.put((total_cost, neighbor))
                path[neighbor] = current_node

    print("Goal node not found!")
    return False

# Heuristic values (tanpa node E)
heuristic = {
    'A': 4, 'B': 3, 'C': 3, 'D': 1, 'S': 6, 'G': 0
}

# Graph adjacency list with costs (tanpa node E)
graph = {
    'S': {'A': 3, 'B': 2},
    'A': {'B': 1, 'D': 5},
    'B': {'C': 2, 'D': 3},
    'C': {'G': 4, 'D': 3},
    'D': {'G': 1}
}

# Define start and goal nodes
start_node = 'S'
goal_node = 'G'

# Run A* Tree Search
a_star_tree_search(graph, start_node, goal_node, heuristic)

# Run A* Graph Search
a_star_graph_search(graph, start_node, goal_node, heuristic)